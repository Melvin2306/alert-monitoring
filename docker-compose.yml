services:
  proxy:
    container_name: torprivoxy
    image: avpnusr/torprivoxy
    restart: unless-stopped
    hostname: proxy
    networks:
      - internal_network
    ports:
      - "8118:8118" # Privoxy port
      - "9050:9050" # Tor SOCKS port
    environment:
      TOR_CONTROL_PASSWORD: "changedetectionpassword" # Set a password for Tor control
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8118/"]
      interval: 30s
      timeout: 10s
      retries: 3

  changedetection:
    container_name: changedetection
    image: ghcr.io/dgtlmoon/changedetection.io:latest
    restart: unless-stopped
    volumes:
      - ./datastore:/datastore
    ports:
      - "8080:5000"
    networks:
      - internal_network
    environment:
      HIDE_REFERER: "true"
      PLAYWRIGHT_DRIVER_URL: "ws://playwright-chrome:3000/?stealth=1&--disable-web-security=false"
      FETCH_BACKEND: "html_webdriver"
      DEFAULT_FETCH_BACKEND: "html_webdriver"
      HTTP_PROXY: "http://proxy:8118"
      HTTPS_PROXY: "http://proxy:8118"
      NO_PROXY: "localhost,127.0.0.1"
      SOCKS_HOST: "proxy"
      SOCKS_PORT: "9050"
      REQUESTS_CA_BUNDLE: "/etc/ssl/certs/ca-certificates.crt"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - proxy

  playwright-chrome:
    container_name: playwright
    image: browserless/chrome
    restart: unless-stopped
    environment:
      SCREEN_WIDTH: "1920"
      SCREEN_HEIGHT: "1080"
      SCREEN_DEPTH: "16"
      ENABLE_DEBUGGER: "false"
      PREBOOT_CHROME: "true"
      CONNECTION_TIMEOUT: "300000"
      MAX_CONCURRENT_SESSIONS: "10"
      CHROME_REFRESH_TIME: "600000"
      DEFAULT_BLOCK_ADS: "true"
      DEFAULT_STEALTH: "true"
      DEFAULT_IGNORE_HTTPS_ERRORS: "true"
      SCREENSHOT_FULLPAGE: "true"
      STATS_REFRESH_SECONDS: "120"
      HTTP_PROXY: "http://proxy:8118"
      HTTPS_PROXY: "http://proxy:8118"
      NO_PROXY: "localhost,127.0.0.1"
    tmpfs:
      - /tmp
    networks:
      - internal_network
    depends_on:
      - proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  main-app:
    container_name: nextjs-app
    build:
      context: ./main-app
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - internal_network
    depends_on:
      changedetection:
        condition: service_started
      proxy:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: "http://changedetection:5000" # Point to the changedetection.io service
      CHANGEDETECTION_URL: "http://changedetection:5000" # Internal URL for API access
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: "production"
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/changedetection"
      # SMTP Configuration - Can be set via .env file or when running docker-compose
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM: ${SMTP_FROM:-}
      SMTP_SECURE: ${SMTP_SECURE:-false}
    ports:
      - "3000:3000" # Expose the Next.js service

  postgres:
    container_name: postgres
    image: postgres:16-alpine
    restart: unless-stopped
    networks:
      - internal_network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: changedetection
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432" # Changed host port to 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d changedetection"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  changedetection-data:
  postgres-data:

networks:
  internal_network:
