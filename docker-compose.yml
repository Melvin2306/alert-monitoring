services:
  proxy:
    container_name: torprivoxy
    image: avpnusr/torprivoxy
    restart: unless-stopped
    hostname: proxy
    networks:
      - tor_network
      - proxy_network
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT_TORPROXY}"
          memory: "${MEMORY_LIMIT_TORPROXY}"
    ports:
      - "127.0.0.1:${PRIVOXY_PORT}:8118" # Privoxy port - restricted to localhost
      - "127.0.0.1:${TOR_SOCKS_PORT}:9050" # Tor SOCKS port - restricted to localhost
      - "127.0.0.1:9051:9051" # Tor control port - needed for circuit renewal
    volumes:
      - tor-data:/home/tordocker/.tor
    environment:
      TOR_CONTROL_PASSWORD: "${TOR_CONTROL_PASSWORD}"
      TOR_CIRCUIT_BUILD_TIMEOUT: "120"
      TOR_MAX_CIRCUIT_DIRTINESS: "3600"
      TOR_NEW_CIRCUIT_PERIOD: "30"
      TOR_ENTRY_GUARDS: "8"
      TOR_ENABLE_CONTROL: "1"
      HOME: "/home/tordocker"
      TOR_DATA_DIRECTORY: "/home/tordocker/.tor"
    user: "10000:10000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8118/"]
      interval: "${HEALTHCHECK_INTERVAL}"
      timeout: "${HEALTHCHECK_TIMEOUT}"
      retries: "${HEALTHCHECK_RETRIES}"

  changedetection:
    container_name: changedetection
    image: ghcr.io/dgtlmoon/changedetection.io:latest
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT_CHANGEDETECTION}"
          memory: "${MEMORY_LIMIT_CHANGEDETECTION}"
    volumes:
      - ./datastore:/datastore
    networks:
      - proxy_network
      - change_network
      - browser_network
    environment:
      HIDE_REFERER: "true"
      PLAYWRIGHT_DRIVER_URL: "ws://playwright-chrome:3000"
      FETCH_BACKEND: "html_webdriver"
      DEFAULT_FETCH_BACKEND: "html_webdriver"
      HTTP_PROXY: "http://proxy:${PRIVOXY_PORT}"
      HTTPS_PROXY: "http://proxy:${PRIVOXY_PORT}"
      NO_PROXY: "localhost,127.0.0.1"
      SOCKS_HOST: "proxy"
      SOCKS_PORT: "${TOR_SOCKS_PORT}"
      REQUESTS_CA_BUNDLE: "/etc/ssl/certs/ca-certificates.crt"
      WEBDRIVER_URL_NOT_FOUND_WAIT_TIME: "300"
      WEBDRIVER_DELAY_BEFORE_CONTENT_READY: "20"
      WEBDRIVER_BS4_SPECIFICS: "true"
      WEBDRIVER_TIMEOUT: "300"
      REQUESTS_TIMEOUT: "300"
      REQUESTS_CONNECT_TIMEOUT: "120"
      USE_PROXY_FOR_REQUESTS: "true"
      IGNORE_SSL_ERRORS: "true"
      ALLOW_INSECURE_SSL: "true"
      SSL_VERIFY: "false"
      PROXY_BYPASS_HOSTNAMES: "localhost,127.0.0.1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: "${HEALTHCHECK_INTERVAL}"
      timeout: "${HEALTHCHECK_TIMEOUT}"
      retries: "${HEALTHCHECK_RETRIES}"
    depends_on:
      - proxy

  playwright-chrome:
    container_name: playwright
    image: browserless/chrome
    restart: unless-stopped
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT_BROWSER}"
          memory: "${MEMORY_LIMIT_BROWSER}"
    networks:
      - browser_network
      - proxy_network
    environment:
      PORT: "3000"
      SCREEN_WIDTH: "1920"
      SCREEN_HEIGHT: "1080"
      SCREEN_DEPTH: "16"
      CHROME_FLAGS: "--ignore-certificate-errors --disable-web-security --disable-features=IsolateOrigins,site-per-process --no-sandbox --disable-setuid-sandbox --proxy-server=http://proxy:8118 --proxy-bypass-list=localhost,127.0.0.1"
      ENABLE_DEBUGGER: "false"
      PREBOOT_CHROME: "true"
      CONNECTION_TIMEOUT: "120000"
      MAX_CONCURRENT_SESSIONS: "5"
      CHROME_REFRESH_TIME: "600000"
      DEFAULT_BLOCK_ADS: "true"
      DEFAULT_STEALTH: "true"
      DEFAULT_IGNORE_HTTPS_ERRORS: "true"
      SCREENSHOT_FULLPAGE: "true"
      STATS_REFRESH_SECONDS: "120"
      PLAYWRIGHT_BROWSERS_PATH: "/ms-playwright"
      BROWSER_TIMEOUT: "30000"
      METRICS_JSON_PATH: "/dev/null"
      MAX_LISTENERS: "100"
    tmpfs:
      - /tmp
    depends_on:
      - proxy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: "${HEALTHCHECK_INTERVAL}"
      timeout: "${HEALTHCHECK_TIMEOUT}"
      retries: "${HEALTHCHECK_RETRIES}"

  main-app:
    container_name: nextjs-app
    build:
      context: ./main-app
      dockerfile: Dockerfile
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT_NEXTJS}"
          memory: "${MEMORY_LIMIT_NEXTJS}"
    networks:
      - change_network
      - db_network
    depends_on:
      changedetection:
        condition: service_started
      proxy:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      NEXT_PUBLIC_API_URL: "/changedetection"
      CHANGEDETECTION_URL: "${CHANGEDETECTION_URL}"
      NEXT_PUBLIC_CHANGEDETECTION_URL: "${NEXT_PUBLIC_CHANGEDETECTION_URL:-}"
      NEXT_PUBLIC_WEBSITE_URL: "${NEXT_PUBLIC_WEBSITE_URL:-https://example.com}"
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_ENV: "production"
      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?schema=public"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_NAME: "${DB_NAME}"
      DB_HOST: "postgres"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      DB_MAX_CONNECTIONS: "${DB_MAX_CONNECTIONS:-20}"
      DB_IDLE_TIMEOUT: "${DB_IDLE_TIMEOUT:-30000}"
      DB_CONNECT_TIMEOUT: "${DB_CONNECT_TIMEOUT:-10000}"
      DB_USE_SSL: "${DB_USE_SSL:-false}"
      DB_REJECT_UNAUTHORIZED: "${DB_REJECT_UNAUTHORIZED:-true}"
      SMTP_HOST: "${SMTP_HOST:-}"
      SMTP_PORT: "${SMTP_PORT:-}"
      SMTP_USER: "${SMTP_USER:-}"
      SMTP_PASSWORD: "${SMTP_PASSWORD:-}"
      SMTP_FROM: "${SMTP_FROM:-}"
      SMTP_SECURE: "${SMTP_SECURE:-false}"
      PRIVOXY_PORT: "${PRIVOXY_PORT}"
      TOR_SOCKS_PORT: "${TOR_SOCKS_PORT}"
      TOR_CONTROL_PASSWORD: "${TOR_CONTROL_PASSWORD}"
      NEXTJS_PORT: "${NEXTJS_PORT}"
      CHANGEDETECTION_PORT: "${CHANGEDETECTION_PORT}"
      NGINX_HTTP_PORT: "${NGINX_HTTP_PORT:-80}"
      NGINX_HTTPS_PORT: "${NGINX_HTTPS_PORT:-443}"

  postgres:
    container_name: postgres
    image: postgres:16-alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT_POSTGRES}"
          memory: "${MEMORY_LIMIT_POSTGRES}"
    networks:
      - db_network
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: "${DB_HEALTHCHECK_INTERVAL}"
      timeout: "${DB_HEALTHCHECK_TIMEOUT}"
      retries: "${DB_HEALTHCHECK_RETRIES}"

  nginx:
    container_name: nginx-reverse-proxy
    image: nginx:alpine
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT_NGINX}"
          memory: "${MEMORY_LIMIT_NGINX}"
    networks:
      - change_network
      - public_network
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - main-app
      - changedetection
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: "${HEALTHCHECK_INTERVAL}"
      timeout: "${HEALTHCHECK_TIMEOUT}"
      retries: "${HEALTHCHECK_RETRIES}"

volumes:
  changedetection-data:
  postgres-data:
  tor-data:

networks:
  # Network for Tor connectivity to the outside world
  tor_network:
    name: tor_network
    internal: false
  # Network for services that need proxy access
  proxy_network:
    name: proxy_network
    internal: true
  # Network for browser connectivity
  browser_network:
    name: browser_network
    internal: true
  # Network for change detection connectivity
  change_network:
    name: change_network
    internal: true
  # Network for database connectivity
  db_network:
    name: db_network
    internal: true
  # Public network for nginx
  public_network:
    name: public_network
    internal: false
